"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/devlop@1.1.0";
exports.ids = ["vendor-chunks/devlop@1.1.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deprecate: () => (/* binding */ deprecate),\n/* harmony export */   equal: () => (/* binding */ equal),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   unreachable: () => (/* binding */ unreachable)\n/* harmony export */ });\n/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ \"(rsc)/./node_modules/.pnpm/dequal@2.0.3/node_modules/dequal/dist/index.mjs\");\n\n/**\n * @type {Set<string>}\n */ const codesWarned = new Set();\nclass AssertionError extends Error {\n    /**\n   * Create an assertion error.\n   *\n   * @param {string} message\n   *   Message explaining error.\n   * @param {unknown} actual\n   *   Value.\n   * @param {unknown} expected\n   *   Baseline.\n   * @param {string} operator\n   *   Name of equality operation.\n   * @param {boolean} generated\n   *   Whether `message` is a custom message or not\n   * @returns\n   *   Instance.\n   */ // eslint-disable-next-line max-params\n    constructor(message, actual, expected, operator, generated){\n        super(message);\n        this.name = /** @type {const} */ \"Assertion\";\n        this.code = /** @type {const} */ \"ERR_ASSERTION\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        /**\n     * @type {unknown}\n     */ this.actual = actual;\n        /**\n     * @type {unknown}\n     */ this.expected = expected;\n        /**\n     * @type {boolean}\n     */ this.generated = generated;\n        /**\n     * @type {string}\n     */ this.operator = operator;\n    }\n}\nclass DeprecationError extends Error {\n    /**\n   * Create a deprecation message.\n   *\n   * @param {string} message\n   *   Message explaining deprecation.\n   * @param {string | undefined} code\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\n   * @returns\n   *   Instance.\n   */ constructor(message, code){\n        super(message);\n        this.name = /** @type {const} */ \"DeprecationWarning\";\n        /**\n     * @type {string | undefined}\n     */ this.code = code;\n    }\n}\n/**\n * Wrap a function or class to show a deprecation message when first called.\n *\n * > ðŸ‘‰ **Important**: only shows a message when the `development` condition is\n * > used, does nothing in production.\n *\n * When the resulting wrapped `fn` is called, emits a warning once to\n * `console.error` (`stderr`).\n * If a code is given, one warning message will be emitted in total per code.\n *\n * @template {Function} T\n *   Function or class kind.\n * @param {T} fn\n *   Function or class.\n * @param {string} message\n *   Message explaining deprecation.\n * @param {string | null | undefined} [code]\n *   Deprecation identifier (optional); deprecation messages will be generated\n *   only once per code.\n * @returns {T}\n *   Wrapped `fn`.\n */ function deprecate(fn, message, code) {\n    let warned = false;\n    // The wrapper will keep the same prototype as fn to maintain prototype chain\n    Object.setPrototypeOf(deprecated, fn);\n    // @ts-expect-error: itâ€™s perfect, typescriptâ€¦\n    return deprecated;\n    /**\n   * @this {unknown}\n   * @param  {...Array<unknown>} args\n   * @returns {unknown}\n   */ function deprecated(...args) {\n        if (!warned) {\n            warned = true;\n            if (typeof code === \"string\" && codesWarned.has(code)) {\n            // Empty.\n            } else {\n                console.error(new DeprecationError(message, code || undefined));\n                if (typeof code === \"string\") codesWarned.add(code);\n            }\n        }\n        return new.target ? Reflect.construct(fn, args, new.target) : Reflect.apply(fn, this, args);\n    }\n}\n/**\n * Assert deep strict equivalence.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @template {unknown} T\n *   Expected kind.\n * @param {unknown} actual\n *   Value.\n * @param {T} expected\n *   Baseline.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\n * @returns {asserts actual is T}\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\n * @throws {AssertionError}\n *   Throws when `actual` is not deep strict equal to `expected`.\n */ function equal(actual, expected, message) {\n    assert((0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(actual, expected), actual, expected, \"equal\", \"Expected values to be deeply equal\", message);\n}\n/**\n * Assert if `value` is truthy.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {unknown} value\n *   Value to assert.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected value to be truthy'`).\n * @returns {asserts value}\n *   Nothing; throws when `value` is falsey.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */ function ok(value, message) {\n    assert(Boolean(value), false, true, \"ok\", \"Expected value to be truthy\", message);\n}\n/**\n * Assert that a code path never happens.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Unreachable'`).\n * @returns {never}\n *   Nothing; always throws.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */ function unreachable(message) {\n    assert(false, false, true, \"ok\", \"Unreachable\", message);\n}\n/**\n * @param {boolean} bool\n *   Whether to skip this operation.\n * @param {unknown} actual\n *   Actual value.\n * @param {unknown} expected\n *   Expected value.\n * @param {string} operator\n *   Operator.\n * @param {string} defaultMessage\n *   Default message for operation.\n * @param {Error | string | null | undefined} userMessage\n *   User-provided message.\n * @returns {asserts bool}\n *   Nothing; throws when falsey.\n */ // eslint-disable-next-line max-params\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n    if (!bool) {\n        throw userMessage instanceof Error ? userMessage : new AssertionError(userMessage || defaultMessage, actual, expected, operator, !userMessage);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\n");

/***/ })

};
;