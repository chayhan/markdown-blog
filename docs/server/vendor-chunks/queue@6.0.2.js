"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/queue@6.0.2";
exports.ids = ["vendor-chunks/queue@6.0.2"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/queue@6.0.2/node_modules/queue/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/.pnpm/queue@6.0.2/node_modules/queue/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nmodule.exports = Queue;\nmodule.exports[\"default\"] = Queue;\nfunction Queue(options) {\n    if (!(this instanceof Queue)) {\n        return new Queue(options);\n    }\n    EventEmitter.call(this);\n    options = options || {};\n    this.concurrency = options.concurrency || Infinity;\n    this.timeout = options.timeout || 0;\n    this.autostart = options.autostart || false;\n    this.results = options.results || null;\n    this.pending = 0;\n    this.session = 0;\n    this.running = false;\n    this.jobs = [];\n    this.timers = {};\n}\ninherits(Queue, EventEmitter);\nvar arrayMethods = [\n    \"pop\",\n    \"shift\",\n    \"indexOf\",\n    \"lastIndexOf\"\n];\narrayMethods.forEach(function(method) {\n    Queue.prototype[method] = function() {\n        return Array.prototype[method].apply(this.jobs, arguments);\n    };\n});\nQueue.prototype.slice = function(begin, end) {\n    this.jobs = this.jobs.slice(begin, end);\n    return this;\n};\nQueue.prototype.reverse = function() {\n    this.jobs.reverse();\n    return this;\n};\nvar arrayAddMethods = [\n    \"push\",\n    \"unshift\",\n    \"splice\"\n];\narrayAddMethods.forEach(function(method) {\n    Queue.prototype[method] = function() {\n        var methodResult = Array.prototype[method].apply(this.jobs, arguments);\n        if (this.autostart) {\n            this.start();\n        }\n        return methodResult;\n    };\n});\nObject.defineProperty(Queue.prototype, \"length\", {\n    get: function() {\n        return this.pending + this.jobs.length;\n    }\n});\nQueue.prototype.start = function(cb) {\n    if (cb) {\n        callOnErrorOrEnd.call(this, cb);\n    }\n    this.running = true;\n    if (this.pending >= this.concurrency) {\n        return;\n    }\n    if (this.jobs.length === 0) {\n        if (this.pending === 0) {\n            done.call(this);\n        }\n        return;\n    }\n    var self = this;\n    var job = this.jobs.shift();\n    var once = true;\n    var session = this.session;\n    var timeoutId = null;\n    var didTimeout = false;\n    var resultIndex = null;\n    var timeout = job.hasOwnProperty(\"timeout\") ? job.timeout : this.timeout;\n    function next(err, result) {\n        if (once && self.session === session) {\n            once = false;\n            self.pending--;\n            if (timeoutId !== null) {\n                delete self.timers[timeoutId];\n                clearTimeout(timeoutId);\n            }\n            if (err) {\n                self.emit(\"error\", err, job);\n            } else if (didTimeout === false) {\n                if (resultIndex !== null) {\n                    self.results[resultIndex] = Array.prototype.slice.call(arguments, 1);\n                }\n                self.emit(\"success\", result, job);\n            }\n            if (self.session === session) {\n                if (self.pending === 0 && self.jobs.length === 0) {\n                    done.call(self);\n                } else if (self.running) {\n                    self.start();\n                }\n            }\n        }\n    }\n    if (timeout) {\n        timeoutId = setTimeout(function() {\n            didTimeout = true;\n            if (self.listeners(\"timeout\").length > 0) {\n                self.emit(\"timeout\", next, job);\n            } else {\n                next();\n            }\n        }, timeout);\n        this.timers[timeoutId] = timeoutId;\n    }\n    if (this.results) {\n        resultIndex = this.results.length;\n        this.results[resultIndex] = null;\n    }\n    this.pending++;\n    self.emit(\"start\", job);\n    var promise = job(next);\n    if (promise && promise.then && typeof promise.then === \"function\") {\n        promise.then(function(result) {\n            return next(null, result);\n        }).catch(function(err) {\n            return next(err || true);\n        });\n    }\n    if (this.running && this.jobs.length > 0) {\n        this.start();\n    }\n};\nQueue.prototype.stop = function() {\n    this.running = false;\n};\nQueue.prototype.end = function(err) {\n    clearTimers.call(this);\n    this.jobs.length = 0;\n    this.pending = 0;\n    done.call(this, err);\n};\nfunction clearTimers() {\n    for(var key in this.timers){\n        var timeoutId = this.timers[key];\n        delete this.timers[key];\n        clearTimeout(timeoutId);\n    }\n}\nfunction callOnErrorOrEnd(cb) {\n    var self = this;\n    this.on(\"error\", onerror);\n    this.on(\"end\", onend);\n    function onerror(err) {\n        self.end(err);\n    }\n    function onend(err) {\n        self.removeListener(\"error\", onerror);\n        self.removeListener(\"end\", onend);\n        cb(err, this.results);\n    }\n}\nfunction done(err) {\n    this.session++;\n    this.running = false;\n    this.emit(\"end\", err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcXVldWVANi4wLjIvbm9kZV9tb2R1bGVzL3F1ZXVlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxXQUFXQyxtQkFBT0EsQ0FBQztBQUN2QixJQUFJQyxlQUFlRCwwREFBOEI7QUFFakRFLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJGLHlCQUFzQixHQUFHRTtBQUV6QixTQUFTQSxNQUFPRSxPQUFPO0lBQ3JCLElBQUksQ0FBRSxLQUFJLFlBQVlGLEtBQUksR0FBSTtRQUM1QixPQUFPLElBQUlBLE1BQU1FO0lBQ25CO0lBRUFMLGFBQWFNLElBQUksQ0FBQyxJQUFJO0lBQ3RCRCxVQUFVQSxXQUFXLENBQUM7SUFDdEIsSUFBSSxDQUFDRSxXQUFXLEdBQUdGLFFBQVFFLFdBQVcsSUFBSUM7SUFDMUMsSUFBSSxDQUFDQyxPQUFPLEdBQUdKLFFBQVFJLE9BQU8sSUFBSTtJQUNsQyxJQUFJLENBQUNDLFNBQVMsR0FBR0wsUUFBUUssU0FBUyxJQUFJO0lBQ3RDLElBQUksQ0FBQ0MsT0FBTyxHQUFHTixRQUFRTSxPQUFPLElBQUk7SUFDbEMsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNDLE9BQU8sR0FBRztJQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHO0lBQ2YsSUFBSSxDQUFDQyxJQUFJLEdBQUcsRUFBRTtJQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHLENBQUM7QUFDakI7QUFDQWxCLFNBQVNLLE9BQU9IO0FBRWhCLElBQUlpQixlQUFlO0lBQ2pCO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFREEsYUFBYUMsT0FBTyxDQUFDLFNBQVVDLE1BQU07SUFDbkNoQixNQUFNaUIsU0FBUyxDQUFDRCxPQUFPLEdBQUc7UUFDeEIsT0FBT0UsTUFBTUQsU0FBUyxDQUFDRCxPQUFPLENBQUNHLEtBQUssQ0FBQyxJQUFJLENBQUNQLElBQUksRUFBRVE7SUFDbEQ7QUFDRjtBQUVBcEIsTUFBTWlCLFNBQVMsQ0FB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QUFDdEIsT0FBTyxHQUFHO0lBQ2Z5QixLQUFLL0IsSUFBSSxDQUFDLElBQUksRUFBRXlDO0FBQ2xCO0FBRUEsU0FBU1U7SUFDUCxJQUFLLElBQUlDLE9BQU8sSUFBSSxDQUFDMUMsTUFBTSxDQUFFO1FBQzNCLElBQUkwQixZQUFZLElBQUksQ0FBQzFCLE1BQU0sQ0FBQzBDLElBQUk7UUFDaEMsT0FBTyxJQUFJLENBQUMxQyxNQUFNLENBQUMwQyxJQUFJO1FBQ3ZCVCxhQUFhUDtJQUNmO0FBQ0Y7QUFFQSxTQUFTTixpQkFBa0JELEVBQUU7SUFDM0IsSUFBSUcsT0FBTyxJQUFJO0lBQ2YsSUFBSSxDQUFDcUIsRUFBRSxDQUFDLFNBQVNDO0lBQ2pCLElBQUksQ0FBQ0QsRUFBRSxDQUFDLE9BQU9FO0lBRWYsU0FBU0QsUUFBU2IsR0FBRztRQUFJVCxLQUFLWixHQUFHLENBQUNxQjtJQUFLO0lBQ3ZDLFNBQVNjLE1BQU9kLEdBQUc7UUFDakJULEtBQUt3QixjQUFjLENBQUMsU0FBU0Y7UUFDN0J0QixLQUFLd0IsY0FBYyxDQUFDLE9BQU9EO1FBQzNCMUIsR0FBR1ksS0FBSyxJQUFJLENBQUNwQyxPQUFPO0lBQ3RCO0FBQ0Y7QUFFQSxTQUFTMEIsS0FBTVUsR0FBRztJQUNoQixJQUFJLENBQUNsQyxPQUFPO0lBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNvQyxJQUFJLENBQUMsT0FBT0g7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZG93bi1ibG9nLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3F1ZXVlQDYuMC4yL25vZGVfbW9kdWxlcy9xdWV1ZS9pbmRleC5qcz85NzI0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcblxubW9kdWxlLmV4cG9ydHMgPSBRdWV1ZVxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IFF1ZXVlXG5cbmZ1bmN0aW9uIFF1ZXVlIChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBRdWV1ZSkpIHtcbiAgICByZXR1cm4gbmV3IFF1ZXVlKG9wdGlvbnMpXG4gIH1cblxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB0aGlzLmNvbmN1cnJlbmN5ID0gb3B0aW9ucy5jb25jdXJyZW5jeSB8fCBJbmZpbml0eVxuICB0aGlzLnRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgfHwgMFxuICB0aGlzLmF1dG9zdGFydCA9IG9wdGlvbnMuYXV0b3N0YXJ0IHx8IGZhbHNlXG4gIHRoaXMucmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0cyB8fCBudWxsXG4gIHRoaXMucGVuZGluZyA9IDBcbiAgdGhpcy5zZXNzaW9uID0gMFxuICB0aGlzLnJ1bm5pbmcgPSBmYWxzZVxuICB0aGlzLmpvYnMgPSBbXVxuICB0aGlzLnRpbWVycyA9IHt9XG59XG5pbmhlcml0cyhRdWV1ZSwgRXZlbnRFbWl0dGVyKVxuXG52YXIgYXJyYXlNZXRob2RzID0gW1xuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ2luZGV4T2YnLFxuICAnbGFzdEluZGV4T2YnXG5dXG5cbmFycmF5TWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgUXVldWUucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZVttZXRob2RdLmFwcGx5KHRoaXMuam9icywgYXJndW1lbnRzKVxuICB9XG59KVxuXG5RdWV1ZS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoYmVnaW4sIGVuZCkge1xuICB0aGlzLmpvYnMgPSB0aGlzLmpvYnMuc2xpY2UoYmVnaW4sIGVuZClcbiAgcmV0dXJuIHRoaXNcbn1cblxuUXVldWUucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuam9icy5yZXZlcnNlKClcbiAgcmV0dXJuIHRoaXNcbn1cblxudmFyIGFycmF5QWRkTWV0aG9kcyA9IFtcbiAgJ3B1c2gnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnXG5dXG5cbmFycmF5QWRkTWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgUXVldWUucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1ldGhvZFJlc3VsdCA9IEFycmF5LnByb3RvdHlwZVttZXRob2RdLmFwcGx5KHRoaXMuam9icywgYXJndW1lbnRzKVxuICAgIGlmICh0aGlzLmF1dG9zdGFydCkge1xuICAgICAgdGhpcy5zdGFydCgpXG4gICAgfVxuICAgIHJldHVybiBtZXRob2RSZXN1bHRcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXVlLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZyArIHRoaXMuam9icy5sZW5ndGhcbiAgfVxufSlcblxuUXVldWUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKGNiKSB7XG4gIGlmIChjYikge1xuICAgIGNhbGxPbkVycm9yT3JFbmQuY2FsbCh0aGlzLCBjYilcbiAgfVxuXG4gIHRoaXMucnVubmluZyA9IHRydWVcblxuICBpZiAodGhpcy5wZW5kaW5nID49IHRoaXMuY29uY3VycmVuY3kpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICh0aGlzLmpvYnMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKHRoaXMucGVuZGluZyA9PT0gMCkge1xuICAgICAgZG9uZS5jYWxsKHRoaXMpXG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBqb2IgPSB0aGlzLmpvYnMuc2hpZnQoKVxuICB2YXIgb25jZSA9IHRydWVcbiAgdmFyIHNlc3Npb24gPSB0aGlzLnNlc3Npb25cbiAgdmFyIHRpbWVvdXRJZCA9IG51bGxcbiAgdmFyIGRpZFRpbWVvdXQgPSBmYWxzZVxuICB2YXIgcmVzdWx0SW5kZXggPSBudWxsXG4gIHZhciB0aW1lb3V0ID0gam9iLmhhc093blByb3BlcnR5KCd0aW1lb3V0JykgPyBqb2IudGltZW91dCA6IHRoaXMudGltZW91dFxuXG4gIGZ1bmN0aW9uIG5leHQgKGVyciwgcmVzdWx0KSB7XG4gICAgaWYgKG9uY2UgJiYgc2VsZi5zZXNzaW9uID09PSBzZXNzaW9uKSB7XG4gICAgICBvbmNlID0gZmFsc2VcbiAgICAgIHNlbGYucGVuZGluZy0tXG4gICAgICBpZiAodGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmLnRpbWVyc1t0aW1lb3V0SWRdXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpXG4gICAgICB9XG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGVyciwgam9iKVxuICAgICAgfSBlbHNlIGlmIChkaWRUaW1lb3V0ID09PSBmYWxzZSkge1xuICAgICAgICBpZiAocmVzdWx0SW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICBzZWxmLnJlc3VsdHNbcmVzdWx0SW5kZXhdID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgICAgICB9XG4gICAgICAgIHNlbGYuZW1pdCgnc3VjY2VzcycsIHJlc3VsdCwgam9iKVxuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5zZXNzaW9uID09PSBzZXNzaW9uKSB7XG4gICAgICAgIGlmIChzZWxmLnBlbmRpbmcgPT09IDAgJiYgc2VsZi5qb2JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRvbmUuY2FsbChzZWxmKVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYucnVubmluZykge1xuICAgICAgICAgIHNlbGYuc3RhcnQoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRpZFRpbWVvdXQgPSB0cnVlXG4gICAgICBpZiAoc2VsZi5saXN0ZW5lcnMoJ3RpbWVvdXQnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGYuZW1pdCgndGltZW91dCcsIG5leHQsIGpvYilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQoKVxuICAgICAgfVxuICAgIH0sIHRpbWVvdXQpXG4gICAgdGhpcy50aW1lcnNbdGltZW91dElkXSA9IHRpbWVvdXRJZFxuICB9XG5cbiAgaWYgKHRoaXMucmVzdWx0cykge1xuICAgIHJlc3VsdEluZGV4ID0gdGhpcy5yZXN1bHRzLmxlbmd0aFxuICAgIHRoaXMucmVzdWx0c1tyZXN1bHRJbmRleF0gPSBudWxsXG4gIH1cblxuICB0aGlzLnBlbmRpbmcrK1xuICBzZWxmLmVtaXQoJ3N0YXJ0Jywgam9iKVxuICB2YXIgcHJvbWlzZSA9IGpvYihuZXh0KVxuICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLnRoZW4gJiYgdHlwZW9mIHByb21pc2UudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gbmV4dChudWxsLCByZXN1bHQpXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgcmV0dXJuIG5leHQoZXJyIHx8IHRydWUpXG4gICAgfSlcbiAgfVxuXG4gIGlmICh0aGlzLnJ1bm5pbmcgJiYgdGhpcy5qb2JzLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnN0YXJ0KClcbiAgfVxufVxuXG5RdWV1ZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5ydW5uaW5nID0gZmFsc2Vcbn1cblxuUXVldWUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgY2xlYXJUaW1lcnMuY2FsbCh0aGlzKVxuICB0aGlzLmpvYnMubGVuZ3RoID0gMFxuICB0aGlzLnBlbmRpbmcgPSAwXG4gIGRvbmUuY2FsbCh0aGlzLCBlcnIpXG59XG5cbmZ1bmN0aW9uIGNsZWFyVGltZXJzICgpIHtcbiAgZm9yICh2YXIga2V5IGluIHRoaXMudGltZXJzKSB7XG4gICAgdmFyIHRpbWVvdXRJZCA9IHRoaXMudGltZXJzW2tleV1cbiAgICBkZWxldGUgdGhpcy50aW1lcnNba2V5XVxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbE9uRXJyb3JPckVuZCAoY2IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHRoaXMub24oJ2Vycm9yJywgb25lcnJvcilcbiAgdGhpcy5vbignZW5kJywgb25lbmQpXG5cbiAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7IHNlbGYuZW5kKGVycikgfVxuICBmdW5jdGlvbiBvbmVuZCAoZXJyKSB7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKVxuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKVxuICAgIGNiKGVyciwgdGhpcy5yZXN1bHRzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGRvbmUgKGVycikge1xuICB0aGlzLnNlc3Npb24rK1xuICB0aGlzLnJ1bm5pbmcgPSBmYWxzZVxuICB0aGlzLmVtaXQoJ2VuZCcsIGVycilcbn1cbiJdLCJuYW1lcyI6WyJpbmhlcml0cyIsInJlcXVpcmUiLCJFdmVudEVtaXR0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiUXVldWUiLCJkZWZhdWx0Iiwib3B0aW9ucyIsImNhbGwiLCJjb25jdXJyZW5jeSIsIkluZmluaXR5IiwidGltZW91dCIsImF1dG9zdGFydCIsInJlc3VsdHMiLCJwZW5kaW5nIiwic2Vzc2lvbiIsInJ1bm5pbmciLCJqb2JzIiwidGltZXJzIiwiYXJyYXlNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsInByb3RvdHlwZSIsIkFycmF5IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzbGljZSIsImJlZ2luIiwiZW5kIiwicmV2ZXJzZSIsImFycmF5QWRkTWV0aG9kcyIsIm1ldGhvZFJlc3VsdCIsInN0YXJ0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJsZW5ndGgiLCJjYiIsImNhbGxPbkVycm9yT3JFbmQiLCJkb25lIiwic2VsZiIsImpvYiIsInNoaWZ0Iiwib25jZSIsInRpbWVvdXRJZCIsImRpZFRpbWVvdXQiLCJyZXN1bHRJbmRleCIsImhhc093blByb3BlcnR5IiwibmV4dCIsImVyciIsInJlc3VsdCIsImNsZWFyVGltZW91dCIsImVtaXQiLCJzZXRUaW1lb3V0IiwibGlzdGVuZXJzIiwicHJvbWlzZSIsInRoZW4iLCJjYXRjaCIsInN0b3AiLCJjbGVhclRpbWVycyIsImtleSIsIm9uIiwib25lcnJvciIsIm9uZW5kIiwicmVtb3ZlTGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/queue@6.0.2/node_modules/queue/index.js\n");

/***/ })

};
;