"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-footnote@2.0.0";
exports.ids = ["vendor-chunks/micromark-extension-gfm-footnote@2.0.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-gfm-footnote@2.0.0/node_modules/micromark-extension-gfm-footnote/dev/lib/html.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-gfm-footnote@2.0.0/node_modules/micromark-extension-gfm-footnote/dev/lib/html.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultBackLabel: () => (/* binding */ defaultBackLabel),\n/* harmony export */   gfmFootnoteHtml: () => (/* binding */ gfmFootnoteHtml)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(rsc)/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.0/node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-sanitize-uri */ \"(rsc)/./node_modules/.pnpm/micromark-util-sanitize-uri@2.0.0/node_modules/micromark-util-sanitize-uri/dev/index.js\");\n/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */ /**\n * @callback BackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   * `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   * `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   * `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */ /**\n * @typedef Options\n *   Configuration.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {string | null | undefined} [label='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {string | null | undefined} [labelAttributes='class=\"sr-only\"']\n *   Attributes to use on the footnote label (default: `'class=\"sr-only\"'`).\n *\n *   Change it to show the label and add other attributes.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different attributes.\n *\n *   > üëâ **Note**: `id=\"footnote-label\"` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [labelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {BackLabelTemplate | string | null | undefined} [backLabel]\n *   Textual label to describe the backreference back to references (default:\n *   `defaultBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *  }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `aria-label` attribute on each backreference\n *   (the `‚Ü©` links).\n *   It affects users of assistive technology.\n */ \n\n\nconst own = {}.hasOwnProperty;\n/** @type {Options} */ const emptyOptions = {};\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */ function defaultBackLabel(referenceIndex, rereferenceIndex) {\n    return \"Back to reference \" + (referenceIndex + 1) + (rereferenceIndex > 1 ? \"-\" + rereferenceIndex : \"\");\n}\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */ function gfmFootnoteHtml(options) {\n    const config = options || emptyOptions;\n    const label = config.label || \"Footnotes\";\n    const labelTagName = config.labelTagName || \"h2\";\n    const labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n    const backLabel = config.backLabel || defaultBackLabel;\n    const clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? \"user-content-\" : config.clobberPrefix;\n    return {\n        enter: {\n            gfmFootnoteDefinition () {\n                const stack = this.getData(\"tightStack\");\n                stack.push(false);\n            },\n            gfmFootnoteDefinitionLabelString () {\n                this.buffer();\n            },\n            gfmFootnoteCallString () {\n                this.buffer();\n            }\n        },\n        exit: {\n            gfmFootnoteDefinition () {\n                let definitions = this.getData(\"gfmFootnoteDefinitions\");\n                const footnoteStack = this.getData(\"gfmFootnoteDefinitionStack\");\n                (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(footnoteStack, \"expected `footnoteStack`\");\n                const tightStack = this.getData(\"tightStack\");\n                const current = footnoteStack.pop();\n                const value = this.resume();\n                (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(current, \"expected to be in a footnote\");\n                if (!definitions) {\n                    this.setData(\"gfmFootnoteDefinitions\", definitions = {});\n                }\n                if (!own.call(definitions, current)) definitions[current] = value;\n                tightStack.pop();\n                this.setData(\"slurpOneLineEnding\", true);\n                // ‚ÄúHack‚Äù to prevent a line ending from showing up if we‚Äôre in a definition in\n                // an empty list item.\n                this.setData(\"lastWasTag\");\n            },\n            gfmFootnoteDefinitionLabelString (token) {\n                let footnoteStack = this.getData(\"gfmFootnoteDefinitionStack\");\n                if (!footnoteStack) {\n                    this.setData(\"gfmFootnoteDefinitionStack\", footnoteStack = []);\n                }\n                footnoteStack.push((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_1__.normalizeIdentifier)(this.sliceSerialize(token)));\n                this.resume() // Drop the label.\n                ;\n                this.buffer() // Get ready for a value.\n                ;\n            },\n            gfmFootnoteCallString (token) {\n                let calls = this.getData(\"gfmFootnoteCallOrder\");\n                let counts = this.getData(\"gfmFootnoteCallCounts\");\n                const id = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_1__.normalizeIdentifier)(this.sliceSerialize(token));\n                /** @type {number} */ let counter;\n                this.resume();\n                if (!calls) this.setData(\"gfmFootnoteCallOrder\", calls = []);\n                if (!counts) this.setData(\"gfmFootnoteCallCounts\", counts = {});\n                const index = calls.indexOf(id);\n                const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_2__.sanitizeUri)(id.toLowerCase());\n                if (index === -1) {\n                    calls.push(id);\n                    counts[id] = 1;\n                    counter = calls.length;\n                } else {\n                    counts[id]++;\n                    counter = index + 1;\n                }\n                const reuseCounter = counts[id];\n                this.tag('<sup><a href=\"#' + clobberPrefix + \"fn-\" + safeId + '\" id=\"' + clobberPrefix + \"fnref-\" + safeId + (reuseCounter > 1 ? \"-\" + reuseCounter : \"\") + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + \"</a></sup>\");\n            },\n            null () {\n                const calls = this.getData(\"gfmFootnoteCallOrder\") || [];\n                const counts = this.getData(\"gfmFootnoteCallCounts\") || {};\n                const definitions = this.getData(\"gfmFootnoteDefinitions\") || {};\n                let index = -1;\n                if (calls.length > 0) {\n                    this.lineEndingIfNeeded();\n                    this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? \" \" + labelAttributes : \"\") + \">\");\n                    this.raw(this.encode(label));\n                    this.tag(\"</\" + labelTagName + \">\");\n                    this.lineEndingIfNeeded();\n                    this.tag(\"<ol>\");\n                }\n                while(++index < calls.length){\n                    // Called definitions are always defined.\n                    const id = calls[index];\n                    const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_2__.sanitizeUri)(id.toLowerCase());\n                    let referenceIndex = 0;\n                    /** @type {Array<string>} */ const references = [];\n                    while(++referenceIndex <= counts[id]){\n                        references.push('<a href=\"#' + clobberPrefix + \"fnref-\" + safeId + (referenceIndex > 1 ? \"-\" + referenceIndex : \"\") + '\" data-footnote-backref=\"\" aria-label=\"' + this.encode(typeof backLabel === \"string\" ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">‚Ü©' + (referenceIndex > 1 ? \"<sup>\" + referenceIndex + \"</sup>\" : \"\") + \"</a>\");\n                    }\n                    const reference = references.join(\" \");\n                    let injected = false;\n                    this.lineEndingIfNeeded();\n                    this.tag('<li id=\"' + clobberPrefix + \"fn-\" + safeId + '\">');\n                    this.lineEndingIfNeeded();\n                    this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function($0) {\n                        injected = true;\n                        return \" \" + reference + $0;\n                    }));\n                    if (!injected) {\n                        this.lineEndingIfNeeded();\n                        this.tag(reference);\n                    }\n                    this.lineEndingIfNeeded();\n                    this.tag(\"</li>\");\n                }\n                if (calls.length > 0) {\n                    this.lineEndingIfNeeded();\n                    this.tag(\"</ol>\");\n                    this.lineEndingIfNeeded();\n                    this.tag(\"</section>\");\n                }\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-gfm-footnote@2.0.0/node_modules/micromark-extension-gfm-footnote/dev/lib/html.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/micromark-extension-gfm-footnote@2.0.0/node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/micromark-extension-gfm-footnote@2.0.0/node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmFootnote: () => (/* binding */ gfmFootnote)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! devlop */ \"(rsc)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-core-commonmark */ \"(rsc)/./node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/dev/lib/blank-line.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ \"(rsc)/./node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ \"(rsc)/./node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"(rsc)/./node_modules/.pnpm/micromark-util-normalize-identifier@2.0.0/node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(rsc)/./node_modules/.pnpm/micromark-util-symbol@2.0.0/node_modules/micromark-util-symbol/lib/constants.js\");\n/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */ \n\n\n\n\n\nconst indent = {\n    tokenize: tokenizeIndent,\n    partial: true\n};\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */ function gfmFootnote() {\n    /** @type {Extension} */ return {\n        document: {\n            [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket]: {\n                tokenize: tokenizeDefinitionStart,\n                continuation: {\n                    tokenize: tokenizeDefinitionContinuation\n                },\n                exit: gfmFootnoteDefinitionEnd\n            }\n        },\n        text: {\n            [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket]: {\n                tokenize: tokenizeGfmFootnoteCall\n            },\n            [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket]: {\n                add: \"after\",\n                tokenize: tokenizePotentialGfmFootnoteCall,\n                resolveTo: resolveToPotentialGfmFootnoteCall\n            }\n        }\n    };\n}\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n    const self = this;\n    let index = self.events.length;\n    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n    /** @type {Token} */ let labelStart;\n    // Find an opening.\n    while(index--){\n        const token = self.events[index][1];\n        if (token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.labelImage) {\n            labelStart = token;\n            break;\n        }\n        // Exit if we‚Äôve walked far enough.\n        if (token.type === \"gfmFootnoteCall\" || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.labelLink || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.label || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.image || token.type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.link) {\n            break;\n        }\n    }\n    return start;\n    /**\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket, \"expected `]`\");\n        if (!labelStart || !labelStart._balanced) {\n            return nok(code);\n        }\n        const id = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__.normalizeIdentifier)(self.sliceSerialize({\n            start: labelStart.end,\n            end: self.now()\n        }));\n        if (id.codePointAt(0) !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.caret || !defined.includes(id.slice(1))) {\n            return nok(code);\n        }\n        effects.enter(\"gfmFootnoteCallLabelMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteCallLabelMarker\");\n        return ok(code);\n    }\n}\n// To do: remove after micromark update.\n/** @type {Resolver} */ function resolveToPotentialGfmFootnoteCall(events, context) {\n    let index = events.length;\n    /** @type {Token | undefined} */ let labelStart;\n    // Find an opening.\n    while(index--){\n        if (events[index][1].type === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.labelImage && events[index][0] === \"enter\") {\n            labelStart = events[index][1];\n            break;\n        }\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(labelStart, \"expected `labelStart` to resolve\");\n    // Change the `labelImageMarker` to a `data`.\n    events[index + 1][1].type = micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.data;\n    events[index + 3][1].type = \"gfmFootnoteCallLabelMarker\";\n    // The whole (without `!`):\n    /** @type {Token} */ const call = {\n        type: \"gfmFootnoteCall\",\n        start: Object.assign({}, events[index + 3][1].start),\n        end: Object.assign({}, events[events.length - 1][1].end)\n    };\n    // The `^` marker\n    /** @type {Token} */ const marker = {\n        type: \"gfmFootnoteCallMarker\",\n        start: Object.assign({}, events[index + 3][1].end),\n        end: Object.assign({}, events[index + 3][1].end)\n    };\n    // Increment the end 1 character.\n    marker.end.column++;\n    marker.end.offset++;\n    marker.end._bufferIndex++;\n    /** @type {Token} */ const string = {\n        type: \"gfmFootnoteCallString\",\n        start: Object.assign({}, marker.end),\n        end: Object.assign({}, events[events.length - 1][1].start)\n    };\n    /** @type {Token} */ const chunk = {\n        type: micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.types.chunkString,\n        contentType: \"string\",\n        start: Object.assign({}, string.start),\n        end: Object.assign({}, string.end)\n    };\n    /** @type {Array<Event>} */ const replacement = [\n        // Take the `labelImageMarker` (now `data`, the `!`)\n        events[index + 1],\n        events[index + 2],\n        [\n            \"enter\",\n            call,\n            context\n        ],\n        // The `[`\n        events[index + 3],\n        events[index + 4],\n        // The `^`.\n        [\n            \"enter\",\n            marker,\n            context\n        ],\n        [\n            \"exit\",\n            marker,\n            context\n        ],\n        // Everything in between.\n        [\n            \"enter\",\n            string,\n            context\n        ],\n        [\n            \"enter\",\n            chunk,\n            context\n        ],\n        [\n            \"exit\",\n            chunk,\n            context\n        ],\n        [\n            \"exit\",\n            string,\n            context\n        ],\n        // The ending (`]`, properly parsed and labelled).\n        events[events.length - 2],\n        events[events.length - 1],\n        [\n            \"exit\",\n            call,\n            context\n        ]\n    ];\n    events.splice(index, events.length - index + 1, ...replacement);\n    return events;\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeGfmFootnoteCall(effects, ok, nok) {\n    const self = this;\n    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n    let size = 0;\n    /** @type {boolean} */ let data;\n    // Note: the implementation of `markdown-rs` is different, because it houses\n    // core *and* extensions in one project.\n    // Therefore, it can include footnote logic inside `label-end`.\n    // We can‚Äôt do that, but luckily, we can parse footnotes in a simpler way than\n    // needed for labels.\n    return start;\n    /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket, \"expected `[`\");\n        effects.enter(\"gfmFootnoteCall\");\n        effects.enter(\"gfmFootnoteCallLabelMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteCallLabelMarker\");\n        return callStart;\n    }\n    /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function callStart(code) {\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.caret) return nok(code);\n        effects.enter(\"gfmFootnoteCallMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteCallMarker\");\n        effects.enter(\"gfmFootnoteCallString\");\n        effects.enter(\"chunkString\").contentType = \"string\";\n        return callData;\n    }\n    /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function callData(code) {\n        if (// Too long.\n        size > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.linkReferenceSizeMax || // Closing brace with nothing.\n        code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.\n        // `\\n` and `[` not being supported makes sense.\n        code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket) {\n            effects.exit(\"chunkString\");\n            const token = effects.exit(\"gfmFootnoteCallString\");\n            if (!defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__.normalizeIdentifier)(self.sliceSerialize(token)))) {\n                return nok(code);\n            }\n            effects.enter(\"gfmFootnoteCallLabelMarker\");\n            effects.consume(code);\n            effects.exit(\"gfmFootnoteCallLabelMarker\");\n            effects.exit(\"gfmFootnoteCall\");\n            return ok;\n        }\n        if (!(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            data = true;\n        }\n        size++;\n        effects.consume(code);\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash ? callEscape : callData;\n    }\n    /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function callEscape(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket) {\n            effects.consume(code);\n            size++;\n            return callData;\n        }\n        return callData(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeDefinitionStart(effects, ok, nok) {\n    const self = this;\n    const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n    /** @type {string} */ let identifier;\n    let size = 0;\n    /** @type {boolean | undefined} */ let data;\n    return start;\n    /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_2__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket, \"expected `[`\");\n        effects.enter(\"gfmFootnoteDefinition\")._container = true;\n        effects.enter(\"gfmFootnoteDefinitionLabel\");\n        effects.enter(\"gfmFootnoteDefinitionLabelMarker\");\n        effects.consume(code);\n        effects.exit(\"gfmFootnoteDefinitionLabelMarker\");\n        return labelAtMarker;\n    }\n    /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */ function labelAtMarker(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.caret) {\n            effects.enter(\"gfmFootnoteDefinitionMarker\");\n            effects.consume(code);\n            effects.exit(\"gfmFootnoteDefinitionMarker\");\n            effects.enter(\"gfmFootnoteDefinitionLabelString\");\n            effects.enter(\"chunkString\").contentType = \"string\";\n            return labelInside;\n        }\n        return nok(code);\n    }\n    /**\n   * In label.\n   *\n   * > üëâ **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function labelInside(code) {\n        if (// Too long.\n        size > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.linkReferenceSizeMax || // Closing brace with nothing.\n        code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.\n        // `\\n` and `[` not being supported makes sense.\n        code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            return nok(code);\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket) {\n            effects.exit(\"chunkString\");\n            const token = effects.exit(\"gfmFootnoteDefinitionLabelString\");\n            identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_3__.normalizeIdentifier)(self.sliceSerialize(token));\n            effects.enter(\"gfmFootnoteDefinitionLabelMarker\");\n            effects.consume(code);\n            effects.exit(\"gfmFootnoteDefinitionLabelMarker\");\n            effects.exit(\"gfmFootnoteDefinitionLabel\");\n            return labelAfter;\n        }\n        if (!(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {\n            data = true;\n        }\n        size++;\n        effects.consume(code);\n        return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash ? labelEscape : labelInside;\n    }\n    /**\n   * After `\\`, at a special character.\n   *\n   * > üëâ **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function labelEscape(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.backslash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket) {\n            effects.consume(code);\n            size++;\n            return labelInside;\n        }\n        return labelInside(code);\n    }\n    /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function labelAfter(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.colon) {\n            effects.enter(\"definitionMarker\");\n            effects.consume(code);\n            effects.exit(\"definitionMarker\");\n            if (!defined.includes(identifier)) {\n                defined.push(identifier);\n            }\n            // Any whitespace after the marker is eaten, forming indented code\n            // is not possible.\n            // No space is also fine, just like a block quote marker.\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, whitespaceAfter, \"gfmFootnoteDefinitionWhitespace\");\n        }\n        return nok(code);\n    }\n    /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function whitespaceAfter(code) {\n        // `markdown-rs` has a wrapping token for the prefix that is closed here.\n        return ok(code);\n    }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeDefinitionContinuation(effects, ok, nok) {\n    /// Start of footnote definition continuation.\n    ///\n    /// ```markdown\n    ///   | [^a]: b\n    /// > |     c\n    ///     ^\n    /// ```\n    //\n    // Either a blank line, which is okay, or an indented thing.\n    return effects.check(micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__.blankLine, ok, effects.attempt(indent, ok, nok));\n}\n/** @type {Exiter} */ function gfmFootnoteDefinitionEnd(effects) {\n    effects.exit(\"gfmFootnoteDefinition\");\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */ function tokenizeIndent(effects, ok, nok) {\n    const self = this;\n    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, afterPrefix, \"gfmFootnoteDefinitionIndent\", micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize + 1);\n    /**\n   * @type {State}\n   */ function afterPrefix(code) {\n        const tail = self.events[self.events.length - 1];\n        return tail && tail[1].type === \"gfmFootnoteDefinitionIndent\" && tail[2].sliceSerialize(tail[1], true).length === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize ? ok(code) : nok(code);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/micromark-extension-gfm-footnote@2.0.0/node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js\n");

/***/ })

};
;