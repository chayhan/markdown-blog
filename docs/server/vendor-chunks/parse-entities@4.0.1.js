"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse-entities@4.0.1";
exports.ids = ["vendor-chunks/parse-entities@4.0.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/lib/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/lib/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseEntities: () => (/* binding */ parseEntities)\n/* harmony export */ });\n/* harmony import */ var character_entities_legacy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! character-entities-legacy */ \"(rsc)/./node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js\");\n/* harmony import */ var character_reference_invalid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! character-reference-invalid */ \"(rsc)/./node_modules/.pnpm/character-reference-invalid@2.0.1/node_modules/character-reference-invalid/index.js\");\n/* harmony import */ var is_decimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! is-decimal */ \"(rsc)/./node_modules/.pnpm/is-decimal@2.0.1/node_modules/is-decimal/index.js\");\n/* harmony import */ var is_hexadecimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! is-hexadecimal */ \"(rsc)/./node_modules/.pnpm/is-hexadecimal@2.0.1/node_modules/is-hexadecimal/index.js\");\n/* harmony import */ var is_alphanumerical__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-alphanumerical */ \"(rsc)/./node_modules/.pnpm/is-alphanumerical@2.0.1/node_modules/is-alphanumerical/index.js\");\n/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! decode-named-character-reference */ \"(rsc)/./node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js\");\n/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */ \n\n\n\n\n\nconst fromCharCode = String.fromCharCode;\n// Warning messages.\nconst messages = [\n    \"\",\n    /* 1: Non terminated (named) */ \"Named character references must be terminated by a semicolon\",\n    /* 2: Non terminated (numeric) */ \"Numeric character references must be terminated by a semicolon\",\n    /* 3: Empty (named) */ \"Named character references cannot be empty\",\n    /* 4: Empty (numeric) */ \"Numeric character references cannot be empty\",\n    /* 5: Unknown (named) */ \"Named character references must be known\",\n    /* 6: Disallowed (numeric) */ \"Numeric character references cannot be disallowed\",\n    /* 7: Prohibited (numeric) */ \"Numeric character references cannot be outside the permissible Unicode range\"\n];\n/**\n * Parse HTML character references.\n *\n * @param {string} value\n * @param {import('../index.js').Options} [options={}]\n */ function parseEntities(value, options = {}) {\n    const additional = typeof options.additional === \"string\" ? options.additional.charCodeAt(0) : options.additional;\n    /** @type {Array<string>} */ const result = [];\n    let index = 0;\n    let lines = -1;\n    let queue = \"\";\n    /** @type {Point|undefined} */ let point;\n    /** @type {Array<number>|undefined} */ let indent;\n    if (options.position) {\n        if (\"start\" in options.position || \"indent\" in options.position) {\n            // @ts-expect-error: points don’t have indent.\n            indent = options.position.indent;\n            // @ts-expect-error: points don’t have indent.\n            point = options.position.start;\n        } else {\n            point = options.position;\n        }\n    }\n    let line = (point ? point.line : 0) || 1;\n    let column = (point ? point.column : 0) || 1;\n    // Cache the current point.\n    let previous = now();\n    /** @type {number|undefined} */ let character;\n    // Ensure the algorithm walks over the first character (inclusive).\n    index--;\n    while(++index <= value.length){\n        // If the previous character was a newline.\n        if (character === 10 /* `\\n` */ ) {\n            column = (indent ? indent[lines] : 0) || 1;\n        }\n        character = value.charCodeAt(index);\n        if (character === 38 /* `&` */ ) {\n            const following = value.charCodeAt(index + 1);\n            // The behavior depends on the identity of the next character.\n            if (following === 9 /* `\\t` */  || following === 10 /* `\\n` */  || following === 12 /* `\\f` */  || following === 32 /* ` ` */  || following === 38 /* `&` */  || following === 60 /* `<` */  || Number.isNaN(following) || additional && following === additional) {\n                // Not a character reference.\n                // No characters are consumed, and nothing is returned.\n                // This is not an error, either.\n                queue += fromCharCode(character);\n                column++;\n                continue;\n            }\n            const start = index + 1;\n            let begin = start;\n            let end = start;\n            /** @type {string} */ let type;\n            if (following === 35 /* `#` */ ) {\n                // Numerical reference.\n                end = ++begin;\n                // The behavior further depends on the next character.\n                const following = value.charCodeAt(end);\n                if (following === 88 /* `X` */  || following === 120 /* `x` */ ) {\n                    // ASCII hexadecimal digits.\n                    type = \"hexadecimal\";\n                    end = ++begin;\n                } else {\n                    // ASCII decimal digits.\n                    type = \"decimal\";\n                }\n            } else {\n                // Named reference.\n                type = \"named\";\n            }\n            let characterReferenceCharacters = \"\";\n            let characterReference = \"\";\n            let characters = \"\";\n            // Each type of character reference accepts different characters.\n            // This test is used to detect whether a reference has ended (as the semicolon\n            // is not strictly needed).\n            const test = type === \"named\" ? is_alphanumerical__WEBPACK_IMPORTED_MODULE_0__.isAlphanumerical : type === \"decimal\" ? is_decimal__WEBPACK_IMPORTED_MODULE_1__.isDecimal : is_hexadecimal__WEBPACK_IMPORTED_MODULE_2__.isHexadecimal;\n            end--;\n            while(++end <= value.length){\n                const following = value.charCodeAt(end);\n                if (!test(following)) {\n                    break;\n                }\n                characters += fromCharCode(following);\n                // Check if we can match a legacy named reference.\n                // If so, we cache that as the last viable named reference.\n                // This ensures we do not need to walk backwards later.\n                if (type === \"named\" && character_entities_legacy__WEBPACK_IMPORTED_MODULE_3__.characterEntitiesLegacy.includes(characters)) {\n                    characterReferenceCharacters = characters;\n                    // @ts-expect-error: always able to decode.\n                    characterReference = (0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_4__.decodeNamedCharacterReference)(characters);\n                }\n            }\n            let terminated = value.charCodeAt(end) === 59 /* `;` */ ;\n            if (terminated) {\n                end++;\n                const namedReference = type === \"named\" ? (0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_4__.decodeNamedCharacterReference)(characters) : false;\n                if (namedReference) {\n                    characterReferenceCharacters = characters;\n                    characterReference = namedReference;\n                }\n            }\n            let diff = 1 + end - start;\n            let reference = \"\";\n            if (!terminated && options.nonTerminated === false) {\n            // Empty.\n            } else if (!characters) {\n                // An empty (possible) reference is valid, unless it’s numeric (thus an\n                // ampersand followed by an octothorp).\n                if (type !== \"named\") {\n                    warning(4 /* Empty (numeric) */ , diff);\n                }\n            } else if (type === \"named\") {\n                // An ampersand followed by anything unknown, and not terminated, is\n                // invalid.\n                if (terminated && !characterReference) {\n                    warning(5 /* Unknown (named) */ , 1);\n                } else {\n                    // If there’s something after an named reference which is not known,\n                    // cap the reference.\n                    if (characterReferenceCharacters !== characters) {\n                        end = begin + characterReferenceCharacters.length;\n                        diff = 1 + end - begin;\n                        terminated = false;\n                    }\n                    // If the reference is not terminated, warn.\n                    if (!terminated) {\n                        const reason = characterReferenceCharacters ? 1 /* Non terminated (named) */  : 3 /* Empty (named) */ ;\n                        if (options.attribute) {\n                            const following = value.charCodeAt(end);\n                            if (following === 61 /* `=` */ ) {\n                                warning(reason, diff);\n                                characterReference = \"\";\n                            } else if ((0,is_alphanumerical__WEBPACK_IMPORTED_MODULE_0__.isAlphanumerical)(following)) {\n                                characterReference = \"\";\n                            } else {\n                                warning(reason, diff);\n                            }\n                        } else {\n                            warning(reason, diff);\n                        }\n                    }\n                }\n                reference = characterReference;\n            } else {\n                if (!terminated) {\n                    // All nonterminated numeric references are not rendered, and emit a\n                    // warning.\n                    warning(2 /* Non terminated (numeric) */ , diff);\n                }\n                // When terminated and numerical, parse as either hexadecimal or\n                // decimal.\n                let referenceCode = Number.parseInt(characters, type === \"hexadecimal\" ? 16 : 10);\n                // Emit a warning when the parsed number is prohibited, and replace with\n                // replacement character.\n                if (prohibited(referenceCode)) {\n                    warning(7 /* Prohibited (numeric) */ , diff);\n                    reference = fromCharCode(65533 /* `�` */ );\n                } else if (referenceCode in character_reference_invalid__WEBPACK_IMPORTED_MODULE_5__.characterReferenceInvalid) {\n                    // Emit a warning when the parsed number is disallowed, and replace by\n                    // an alternative.\n                    warning(6 /* Disallowed (numeric) */ , diff);\n                    reference = character_reference_invalid__WEBPACK_IMPORTED_MODULE_5__.characterReferenceInvalid[referenceCode];\n                } else {\n                    // Parse the number.\n                    let output = \"\";\n                    // Emit a warning when the parsed number should not be used.\n                    if (disallowed(referenceCode)) {\n                        warning(6 /* Disallowed (numeric) */ , diff);\n                    }\n                    // Serialize the number.\n                    if (referenceCode > 0xffff) {\n                        referenceCode -= 0x10000;\n                        output += fromCharCode(referenceCode >>> (10 & 0x3ff) | 0xd800);\n                        referenceCode = 0xdc00 | referenceCode & 0x3ff;\n                    }\n                    reference = output + fromCharCode(referenceCode);\n                }\n            }\n            // Found it!\n            // First eat the queued characters as normal text, then eat a reference.\n            if (reference) {\n                flush();\n                previous = now();\n                index = end - 1;\n                column += end - start + 1;\n                result.push(reference);\n                const next = now();\n                next.offset++;\n                if (options.reference) {\n                    options.reference.call(options.referenceContext, reference, {\n                        start: previous,\n                        end: next\n                    }, value.slice(start - 1, end));\n                }\n                previous = next;\n            } else {\n                // If we could not find a reference, queue the checked characters (as\n                // normal characters), and move the pointer to their end.\n                // This is possible because we can be certain neither newlines nor\n                // ampersands are included.\n                characters = value.slice(start - 1, end);\n                queue += characters;\n                column += characters.length;\n                index = end - 1;\n            }\n        } else {\n            // Handle anything other than an ampersand, including newlines and EOF.\n            if (character === 10 /* `\\n` */ ) {\n                line++;\n                lines++;\n                column = 0;\n            }\n            if (Number.isNaN(character)) {\n                flush();\n            } else {\n                queue += fromCharCode(character);\n                column++;\n            }\n        }\n    }\n    // Return the reduced nodes.\n    return result.join(\"\");\n    // Get current position.\n    function now() {\n        return {\n            line,\n            column,\n            offset: index + ((point ? point.offset : 0) || 0)\n        };\n    }\n    /**\n   * Handle the warning.\n   *\n   * @param {1|2|3|4|5|6|7} code\n   * @param {number} offset\n   */ function warning(code, offset) {\n        /** @type {ReturnType<now>} */ let position;\n        if (options.warning) {\n            position = now();\n            position.column += offset;\n            position.offset += offset;\n            options.warning.call(options.warningContext, messages[code], position, code);\n        }\n    }\n    /**\n   * Flush `queue` (normal text).\n   * Macro invoked before each reference and at the end of `value`.\n   * Does nothing when `queue` is empty.\n   */ function flush() {\n        if (queue) {\n            result.push(queue);\n            if (options.text) {\n                options.text.call(options.textContext, queue, {\n                    start: previous,\n                    end: now()\n                });\n            }\n            queue = \"\";\n        }\n    }\n}\n/**\n * Check if `character` is outside the permissible unicode range.\n *\n * @param {number} code\n * @returns {boolean}\n */ function prohibited(code) {\n    return code >= 0xd800 && code <= 0xdfff || code > 0x10ffff;\n}\n/**\n * Check if `character` is disallowed.\n *\n * @param {number} code\n * @returns {boolean}\n */ function disallowed(code) {\n    return code >= 0x0001 && code <= 0x0008 || code === 0x000b || code >= 0x000d && code <= 0x001f || code >= 0x007f && code <= 0x009f || code >= 0xfdd0 && code <= 0xfdef || (code & 0xffff) === 0xffff || (code & 0xffff) === 0xfffe;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/parse-entities@4.0.1/node_modules/parse-entities/lib/index.js\n");

/***/ })

};
;